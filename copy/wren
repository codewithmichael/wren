#!/bin/sh
#
# NAME
#
#   wren
#
# DESCRIPTION
#
#   Control script for public-facing platform functionality.
#
# AUTHOR
#
#   Originally written by Michael Spencer.
#   Maintained by the Wren project developers.
#
#
# The Wren project; Copyright 2013-2015 the Wren project developers.
# See the COPYRIGHT file in the top-level directory of this distribution
# for individual attributions.
#
# This file is part of the Wren project. It is subject to the license terms
# in the LICENSE file found in the top-level directory of this distribution.
# No part of the Wren project, including this file, may be copied, modified,
# propagated, or distributed except according to the terms contained in the
# LICENSE file.
#
# This program comes with ABSOLUTELY NO WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# LICENSE file found in the top-level directory of this distribution for
# more details.
#

###
### CONFIG
###

# clean environment
unset IFS
PATH=/usr/sbin:/usr/bin:/sbin:/bin

# ensure platform name is defined
test x"$RUN_ENV_PLATFORM_NAME" = x \
    && { echo "Could not determine platform environment name - exiting..." >&2 ; exit 1 ; }

# load platform environment
platform_dir=/etc/$RUN_ENV_PLATFORM_NAME
. "$platform_dir/platform-env" \
    || { echo "Could not load platform environment - exiting..." >&2 ; exit 1 ; }

# failure function
panicExit()
{
    test x"$1" = x \
        && echo "An error occurred - exiting..." >&2 \
        || echo "$1 - exiting..." >&2

    exit 1
}

# ensure root permissions
testRootUser || panicExit "Root permissions (or sudo) required"

# load boot configurations and options
loadRunEnvConf || panicExit
updateBootOptions || panicExit

# script paths
CMD_SAVE=$platform_dir/save.sh
CMD_INCREASE_SAVE_SIZE=$platform_dir/increase-save-size.sh
CMD_UPDATE_GRUB=$platform_dir/update-grub.sh

# Other paths
testVariableDefinition MOUNT_DEVICE || panicExit
PATH_GRUB_CONFIG=$MOUNT_DEVICE/boot/grub/grub.cfg

# load environment variables
testVariableDefinition RUN_ENV_DIRECTORY || panicExit
env_file=$RUN_ENV_DIRECTORY/env_control
SAVENAME=""
SAVEFILE=""
test -f "$env_file" && . "$env_file"

# writes environment variables back to the file
writeEnvFile()
{
    # Store control environment variables
    env_content="### AUTOGENERATED
### DO NOT EDIT
SAVENAME=\"$SAVENAME\"
SAVEFILE=\"$SAVEFILE\""
    mkdir -p "$(dirname "$env_file")" || return $?
    echo "$env_content" >"$env_file" || return $?
    return 0
}

# parse options
command="$1"
case "$command" in

    list )      option="$2"
                all=0
                if test -n "$option"; then
                    case "$option" in
                        all )   all=1 ;;
                        * )     panicExit "Unknown \"list\" option: $option" ;;
                    esac
                fi
                test x"$all" = x1 -o -n "$SAVENAME" && echo "savename=$SAVENAME"
                test x"$all" = x1 -o -n "$SAVEFILE" && echo "savefile=$SAVEFILE"
                ;;

    get )       option="$2"
                case "$option" in
                    savename )  echo "$SAVENAME" ;;
                    savefile )  echo "$SAVEFILE" ;;
                    * )         panicExit "Unknown \"get\" option: $option"
                esac
                ;;

    set )       option="$2"
                case "$option" in
                    savename=* )    value=${option#savename=}
                                    option=savename
                                    ;;
                    savefile=* )    value=${option#savefile=}
                                    option=savefile
                                    ;;
                    savename | \
                    savefile )      value="$3"
                                    ;;
                    * )             panicExit "Unknown \"set\" option: $option" ;;
                esac
                if test -n "$value"; then
                    case "$option" in
                        savename )  SAVENAME="$value"
                                    SAVEFILE=""
                                    writeEnvFile || panicExit
                                    ;;
                        savefile )  SAVEFILE="$value"
                                    SAVENAME=""
                                    writeEnvFile || panicExit
                                    ;;
                        * )         panicExit "Unknown \"set\" option: $option" ;;
                    esac
                else
                    panicExit "Option \"set\" requires an option and a value"
                fi
                ;;
                
    unset )     option="$2"
                case "$option" in
                    savename )  SAVENAME="" && writeEnvFile || panicExit ;;
                    savefile )  SAVEFILE="" && writeEnvFile || panicExit ;;
                    * )         panicExit "Unknown \"unset\" option: $option" ;;
                esac
                ;;

    status )    option="$2"

                # check for invalid options
                case "$option" in
                    '' | all | platform | device | savename | savefile | savenames ) ;;
                    * ) panicExit "Unknown \"status\" option: $option" ;;
                esac

                # determine if device is mounted
                case "$option" in '' | all | device | savename | savefile | savenames )
                    testVariableDefinition MOUNT_DEVICE \
                        || panicExit
                    testIsMounted "$MOUNT_DEVICE" \
                        && device_mounted=1 \
                        || device_mounted=0
                esac

                # platform
                case "$option" in platform | all | '' )
                    testVariableDefinition RUN_ENV_PLATFORM_NAME || panicExit
                    testVariableDefinition RUN_ENV_PLATFORM_VERSION || panicExit
                    testVariableDefinition RUN_ENV_PLATFORM_DISPLAY_NAME || panicExit
                    test -z "$option" -o "$option" = all && printf 'platform:  '
                    echo "$RUN_ENV_PLATFORM_DISPLAY_NAME ($RUN_ENV_PLATFORM_NAME-$RUN_ENV_PLATFORM_VERSION)"
                esac

                # device
                case "$option" in device | all | '' )
                    testVariableDefinition MOUNT_DEVICE \
                        || panicExit
                    device=$(cat /proc/mounts | grep "\S\+\s\+$MOUNT_DEVICE\s" | cut -d ' ' -f 1) \
                        || panicExit
                    if test "$device_mounted" = 0 -o -z "$device"; then
                        test -z "$option" -o "$option" = all && printf 'device:    '
                        echo "<not mounted>"
                    else
                        device=$(readlink -m "$device") || panicExit
                        test -z "$option" -o "$option" = all && printf 'device:    '
                        echo "$device"
                    fi
                esac

                # savename
                case "$option" in savename | all | '' )
                    if test "$device_mounted" = 1 -a -z "$SAVEFILE"; then
                        test -z "$option" -o "$option" = all && printf 'savename:  '
                        if test -n "$SAVENAME"; then
                            echo "$SAVENAME"
                        elif test -n "$BOOT_SAVE"; then
                            echo "$BOOT_SAVE"
                        elif test -n "$PLATFORM_DEFAULT_SAVE"; then
                            echo "$PLATFORM_DEFAULT_SAVE"
                        fi
                    fi
                esac

                # savefile
                case "$option" in savefile | all | '' )
                    if test -n "$SAVEFILE"; then
                        test -z "$option" -o "$option" = all && printf 'savefile:  '
                        echo "$SAVEFILE"
                    elif test "$device_mounted" = 1; then
                        test -z "$option" -o "$option" = all && printf 'savefile:  '
                        if test -n "$SAVENAME"; then
                            echo "$(getSaveImagePath "$SAVENAME")" \
                                || panicExit
                        else
                            echo "$(getSaveImagePath)" \
                                || panicExit
                        fi
                    fi
                esac

                # savenames
                case "$option" in savenames | all | '' )
                    if test "$device_mounted" = 1; then
                        dir_saves=$(getDeviceSavesDirectoryPath) \
                            || panicExit
                        if test -n "$dir_saves" -a -d "$dir_saves"; then
                            saves=$(getAbsoluteDirectoryList "$dir_saves") \
                                || panicExit
                            test -z "$option" -o "$option" = all && printf 'savenames: '
                            first=1
                            echo "$saves" | while IFS= read -r i; do
                                if test -d "$i"; then
                                    savename=$(basename "$i") \
                                        || panicExit
                                    if test "$first" = 0; then
                                        test -z "$option" -o "$option" = all && printf '           '
                                    fi
                                    echo "$savename"
                                    first=0
                                fi
                            done
                        fi
                    fi
                esac
                ;;
                
    save )      savename=""
                savefile=""
                option="$2"
                if test -n "$option"; then
                    case "$option" in
                        savename=* )    savename="${option#savename=}" ;;
                        savefile=* )    savefile="${option#savefile=}" ;;
                        * )             panicExit "Unknown \"save\" option: $option" ;;
                    esac
                else
                    if test -n "$SAVENAME"; then
                        savename="$SAVENAME"
                    elif test -n "$SAVEFILE"; then
                        savefile="$SAVEFILE"
                    else
                        if test -n "$BOOT_SAVE"; then
                            savename="$BOOT_SAVE"
                            echo "Using boot-time save name: $savename"
                        elif test -n "$PLATFORM_DEFAULT_SAVE"; then
                            savename="$PLATFORM_DEFAULT_SAVE"
                            echo "Using platform-default save name: $savename "
                        fi
                    fi
                fi
                if test -n "$savename"; then
                    $CMD_SAVE -s "$savename" || panicExit
                elif test -n "$savefile"; then
                    $CMD_SAVE -f "$savefile" || panicExit
                else
                    panicExit "Option \"save\" requires a valid \"savename\" or \"savefile\" value"
                fi
                ;;

    +active )   $CMD_INCREASE_SAVE_SIZE ;;

    grub )      option="$2"
                case "$option" in
                    show )      test -f "$PATH_GRUB_CONFIG" \
                                    || panicExit "Could not locate file: $PATH_GRUB_CONFIG"
                                cat "$PATH_GRUB_CONFIG" \
                                    || panicExit
                                ;;
                    generate )  $CMD_UPDATE_GRUB
                                ;;
                    write )     modifier="$3"
                                test "$modifier" = '-v' \
                                    && echo "Verifying Grub configuration directory..."
                                dir_grub_config=$(dirname "$PATH_GRUB_CONFIG") \
                                    && test -d "$dir_grub_config" \
                                    || panicExit "Grub configuration directory not found"
                                test "$modifier" = '-v' \
                                    && echo "Generating updated Grub configuration..."
                                updated_grub_config=$($CMD_UPDATE_GRUB) \
                                    || panicExit
                                if test -f "$PATH_GRUB_CONFIG"; then
                                    test "$modifier" = '-v' \
                                        && echo "Backing up current Grub configuration..."
                                    cp "$PATH_GRUB_CONFIG" "$PATH_GRUB_CONFIG~" \
                                        || panicExit
                                fi
                                test "$modifier" = '-v' \
                                    && echo "Writing Grub configuration..."
                                echo "$updated_grub_config" >"$PATH_GRUB_CONFIG" \
                                    || panicExit
                                test "$modifier" = '-v' \
                                    && echo "Done."
                                ;;
                    * )         panicExit "Unknown \"grub\" option: $option"
                                ;;
                esac
                ;;

    * )         panicExit "Unknown option: $command" ;;

esac
